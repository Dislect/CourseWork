// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using сoursework.Data.Models;

namespace сoursework.Migrations
{
    [DbContext(typeof(BookStoreDBContext))]
    [Migration("20211014175254_AddingTables")]
    partial class AddingTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("booksid")
                        .HasColumnType("int");

                    b.Property<int>("genresid")
                        .HasColumnType("int");

                    b.HasKey("booksid", "genresid");

                    b.HasIndex("genresid");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookStore", b =>
                {
                    b.Property<int>("booksid")
                        .HasColumnType("int");

                    b.Property<int>("storesid")
                        .HasColumnType("int");

                    b.HasKey("booksid", "storesid");

                    b.HasIndex("storesid");

                    b.ToTable("BookStore");
                });

            modelBuilder.Entity("сoursework.Data.Models.Author", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("сoursework.Data.Models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("authorid")
                        .HasColumnType("int");

                    b.Property<long?>("cost")
                        .HasColumnType("bigint");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgAlterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("publisherid")
                        .HasColumnType("int");

                    b.Property<long?>("quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("year")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("authorid");

                    b.HasIndex("publisherid");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("сoursework.Data.Models.Genre", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("titleGenre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("сoursework.Data.Models.ObjectsDB.Employee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Positionid")
                        .HasColumnType("int");

                    b.Property<int?>("idStoreid")
                        .HasColumnType("int");

                    b.Property<string>("imgAlterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Positionid");

                    b.HasIndex("idStoreid");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("сoursework.Data.Models.ObjectsDB.Position", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("employeePosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("salary")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("сoursework.Data.Models.Publisher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("сoursework.Data.Models.Store", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("area")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("сoursework.Data.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("сoursework.Data.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("genresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore", b =>
                {
                    b.HasOne("сoursework.Data.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("сoursework.Data.Models.Store", null)
                        .WithMany()
                        .HasForeignKey("storesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("сoursework.Data.Models.Book", b =>
                {
                    b.HasOne("сoursework.Data.Models.Author", "author")
                        .WithMany("books")
                        .HasForeignKey("authorid");

                    b.HasOne("сoursework.Data.Models.Publisher", "publisher")
                        .WithMany("books")
                        .HasForeignKey("publisherid");

                    b.Navigation("author");

                    b.Navigation("publisher");
                });

            modelBuilder.Entity("сoursework.Data.Models.ObjectsDB.Employee", b =>
                {
                    b.HasOne("сoursework.Data.Models.ObjectsDB.Position", null)
                        .WithMany("employees")
                        .HasForeignKey("Positionid");

                    b.HasOne("сoursework.Data.Models.Store", "idStore")
                        .WithMany("employees")
                        .HasForeignKey("idStoreid");

                    b.Navigation("idStore");
                });

            modelBuilder.Entity("сoursework.Data.Models.Author", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("сoursework.Data.Models.ObjectsDB.Position", b =>
                {
                    b.Navigation("employees");
                });

            modelBuilder.Entity("сoursework.Data.Models.Publisher", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("сoursework.Data.Models.Store", b =>
                {
                    b.Navigation("employees");
                });
#pragma warning restore 612, 618
        }
    }
}
